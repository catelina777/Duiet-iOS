default_platform :ios

platform :ios do

  desc 'Run Duiet.app tests'
  lane :duiet_tests do
    run_test("Duiet.xcworkspace", 'DuietTests', 'name=iPhone 11 Pro Max,OS=13.5', 'DuietTests')
    run_test("Duiet.xcworkspace", 'DuietUITests', 'name=iPhone 11 Pro Max,OS=13.5', 'DuietUITests')
  end

  def run_test(workspace, scheme, destination, testcase)
    Dir.chdir("#{ENV['PWD']}") do
      sh "set -o pipefail && xcodebuild -alltargets clean"
      sh "set -o pipefail && xcodebuild test -workspace #{workspace} -scheme #{scheme} -destination '#{destination}' -only-testing:#{testcase} -derivedDataPath DerivedData -enableCodeCoverage YES ENABLE_TESTABILITY=YES | xcpretty"
    end
  end

  lane :release_with_increment_build_version do
    increment_build_number
    commit_version_bump
    commit_push_create_pr(branch_name: "ci/release-#{Time.now.to_i}", message: 'Release with increment build version')
  end

  lane :release_with_increment_patch_version do
    increment_version_number(bump_type: "patch")
    commit_version_bump
    commit_push_create_pr(branch_name: "ci/release-#{Time.now.to_i}", message: 'Release with increment patch version')
  end

  lane :release_with_increment_minor_version do
    increment_version_number(bump_type: "minor")
    commit_version_bump
    commit_push_create_pr(branch_name: "ci/release-#{Time.now.to_i}", message: 'Release with increment minor version')
  end

  lane :release_with_increment_major_version do
    increment_version_number(bump_type: "major")
    commit_version_bump
    commit_push_create_pr(branch_name: "ci/release-#{Time.now.to_i}", message: 'Release with increment major version')
  end

  desc 'Update dependencies managed by CocoaPods and Carthage'
  lane :update_dependencies do
    Dir.chdir("#{ENV['PWD']}") do
      sh 'bundle exec pod update'
      sh 'carthage update --platform ios --configuration Release --cache-builds'

      unless system('git diff --quiet --exit-code')
        system('git add Podfile.lock')
        system('git add Cartfile.resolved')
        commit_push_create_pr(branch_name: "ci/update-dependencies-#{Time.now.to_i}", message: 'Update dependencies managed by CocoaPods and Carthage')
      end
    end
  end

  lane :update_tools do
    Dir.chdir("#{ENV['PWD']}") do
      sh 'bundle update'

      unless system('git diff --quiet --exit-code')
        sh 'git add Gemfile.lock'
        commit_push_create_pr(branch_name: "ci/update-tools-#{Time.now.to_i}", message: 'Update developer tools')
      end
    end
  end

  lane :update_license_list do
    github_token = ENV['GITHUB_ACCESS_TOKEN']
    Dir.chdir("#{ENV['PWD']}") do
      sh "Pods/LicensePlist/license-plist --force --output-path Duiet/Resources/Settings/Settings.bundle --github-token #{github_token} --suppress-opening-directory"

      unless system('git diff --quiet --exit-code')
        sh 'git add Duiet/Resources/Settings/Settings.bundle/'
        commit_push_create_pr(branch_name: "ci/update-license-#{Time.now.to_i}", message: 'Update license list')
      end
    end
  end

  lane :sync_bitrise_yml do
    Dir.chdir("#{ENV['PWD']}") do
      sh "curl -O -H 'Authorization: token #{ENV['BITRISE_ACCESS_TOKEN']}' 'https://api.bitrise.io/v0.1/apps/#{ENV['BITRISE_APP_SLUG']}/bitrise.yml'"

      unless system('git diff --quiet --exit-code')
        sh 'git add bitrise.yml'
        commit_push_create_pr(branch_name: "ci/sync-bitrise_yml-#{Time.now.to_i}", message: 'Sync bitrise.yml')
      end
    end
  end

  def commit_push_create_pr(branch_name: "", message: "")
    sh "git checkout -b #{branch_name}"
    sh "git commit -m '#{message}'"
    sh 'git push origin HEAD'
    create_pull_request(
      api_token: ENV['GITHUB_ACCESS_TOKEN'],
      repo: "catelina777/Duiet-iOS",
      title: message,
      head: branch_name,
      body: "This PR was generated by fastlane ðŸš€"
    )
  end

  class GitHub
    attr_reader :slug
    attr_reader :access_token

    def initialize(owner, repo, access_token)
      @owner = owner
      @repo = repo
      @access_token = access_token
    end

    def upload_file(filepath, tag, branch = 'master')
      raise "A personal access token is required" unless access_token

      response = create_tag(tag, branch)
      pp response
      if response['id']
        upload_release(filepath, response['id'])
      end
    end

    def download_asset(tag)
      raise "A personal access token is required" unless access_token

      response = find_release(tag)
      pp response
      if response['assets']
        asset_id = response['assets'][0]['id']
        Fastlane::Actions::sh "curl -sSfLJO -H 'Accept: application/octet-stream' -u :#{access_token} #{asset_url(asset_id)}"
      end
    end

    def replace_file(filepath, tag)
      raise "A personal access token is required" unless access_token

      response = find_release(tag)
      pp response
      if response['assets']
        asset_id = response['assets'][0]['id']
        Fastlane::Actions::sh "curl -sSfL -u :#{access_token} -X DELETE #{asset_url(asset_id)}"

        upload_release(filepath, response['id'])
      else
        upload_file(filepath, tag)
      end
    end

    private

    def create_tag(tag, branch)
      data = {tag_name: tag, target_commitish: branch, name: tag, body: '', draft: false, prerelease: false}.to_json
      url = "https://api.github.com/repos/#{slug}/releases"

      out, status = Open3.capture2(*['curl', '-sSL', '-H', "Authorization: token #{access_token}", '-d', "#{data}", "#{url}"])
      JSON.parse(out)
    end

    def upload_release(filepath, release_id)
      filename = File.basename(filepath)
      url = "https://uploads.github.com/repos/#{slug}/releases/#{release_id}/assets?name=#{filename}"

      Fastlane::Actions::sh %[curl -sSL -u :#{access_token} -X POST "#{url}" -H "Content-Type: application/gzip" --data-binary @"#{filepath}"]
    end

    def find_release(hash)
      url = "https://api.github.com/repos/#{slug}/releases/tags/#{hash}"

      out, status = Open3.capture2(*['curl', '-sSL', "#{url}", '-H', "Authorization: token #{access_token}"])
      JSON.parse(out)
    end

    def slug
      "#{@owner}/#{@repo}"
    end

    def asset_url(asset_id)
      "https://api.github.com/repos/#{slug}/releases/assets/#{asset_id}"
    end
  end

  github = GitHub.new(ENV['GITHUB_OWNER'], ENV['GITHUB_CACHE_REPO'], ENV['GITHUB_ACCESS_TOKEN'])

  desc 'Archive build dependencies and upload it to GitHub Releases'
  lane :upload_build_cache do
    Dir.chdir("#{ENV['PWD']}") do
      archive_build_dependencies
      github.upload_file(build_cache_file, deps_hash)
      clean_build_cache
    end
  end

  desc 'Download build dependencies and expand it'
  lane :download_build_cache do
    Dir.chdir("#{ENV['PWD']}") do
      puts deps_hash
      github.download_asset(deps_hash)
      system "tar xf #{build_cache_file}"
      clean_build_cache
    end
  end

  desc 'Overwrite theã€€existing build cache with the latest'
  lane :renew_build_cache do
    Dir.chdir("#{ENV['PWD']}") do
      archive_build_dependencies
      github.replace_file(build_cache_file, deps_hash)
      clean_build_cache
    end
  end

  def archive_build_dependencies
    sh "tar czf #{build_cache_file} --exclude XCBuildData Carthage/Build/ Pods/"
  end

  def build_cache_file
    File.expand_path('./deps.tar.gz')
  end

  def clean_build_cache
    system "rm -f #{build_cache_file}"
  end

  def deps_hash
    %x[cat Cartfile.resolved Podfile.lock | perl -le 'use Digest::SHA qw(sha256_hex); print sha256_hex(<>);'].strip
  end
end
