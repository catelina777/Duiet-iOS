default_platform :ios

platform :ios do

  desc 'Run Duiet.app tests'
  lane :duiet_tests do
    run_test("Duiet.xcworkspace", 'Duiet', 'name=iPhone Xs Max,OS=12.2', 'DuietTests')
  end

  def run_test(workspace, scheme, destination, testcase)
    Dir.chdir("#{ENV['PWD']}") do
      sh "set -o pipefail && xcodebuild -alltargets clean"
      sh "set -o pipefail && xcodebuild test -workspace #{workspace} -scheme #{scheme} -destination '#{destination}' -only-testing:#{testcase} -derivedDataPath DerivedData -enableCodeCoverage YES ENABLE_TESTABILITY=YES | xcpretty"
    end
  end


  desc 'Update dependencies managed by CocoaPods'
  lane :update_dependencies do
    Dir.chdir("#{ENV['PWD']}") do
      sh 'bundle exec pod update'

      unless system('git diff --quiet --exit-code')
        system('git add Podfile.lock')
        commit_push_create_pr(branch_name: "ci/update-dependencies-#{Time.now.to_i}", message: 'Update dependencies managed by CocoaPods')
      end
    end
  end

  lane :update_tools do
    Dir.chdir("#{ENV['PWD']}") do
      sh 'bundle update'

      unless system('git diff --quiet --exit-code')
        sh 'git add Gemfile.lock'
        commit_push_create_pr(branch_name: "ci/update-tools-#{Time.now.to_i}", message: 'Update developer tools')
      end
    end
  end

  def commit_push_create_pr(branch_name: "", message: "")
    sh "git checkout -b #{branch_name}"
    sh "git commit -m '#{message}'"
    sh 'git push origin HEAD'
    create_pull_request(
      api_token: ENV['GITHUB_ACCESS_TOKEN'],
      repo: "catelina777/Duiet-iOS",
      title: message,
      head: branch_name,
      body: "This PR was generated by fastlane ðŸš€"
    )
  end
end
